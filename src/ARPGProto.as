/********************************************************************
**       This head file is generated by program,                   **
**            Please do not change it directly.                    **
********************************************************************/

package
{
    import flash.utils.ByteArray;
    import flash.utils.Dictionary;
    
    import communication.arpg.ARPGMsgProcessor;
    
    import protobuf.ASPKG_ADD_MONSTER_NTF;
    import protobuf.ASPKG_ADD_PLAYER_NTF;
    import protobuf.ASPKG_CAST_SKILL_ACK;
    import protobuf.ASPKG_CAST_SKILL_NTF;
    import protobuf.ASPKG_CHAT_NTF;
    import protobuf.ASPKG_HP_UPDATE_NTF;
    import protobuf.ASPKG_LOGIN_ACK;
    import protobuf.ASPKG_MOVE_ACK;
    import protobuf.ASPKG_MOVE_NTF;
    import protobuf.ASPKG_MP_UPDATE_NTF;
    import protobuf.ASPKG_REMOVE_PLAYER_NTF;
    
    public class ARPGProto
    {
        static public var ASID_LOGIN_REQ:String = "1";
        static public var ASID_LOGIN_ACK:String = "2";
        static public var ASID_MOVE_REQ:String = "3";
        static public var ASID_MOVE_ACK:String = "4";
        static public var ASID_MOVE_NTF:String = "5";
        static public var ASID_ADD_PLAYER_NTF:String = "6";
        static public var ASID_REMOVE_PLAYER_NTF:String = "7";
        static public var ASID_CAST_SKILL_REQ:String = "8";
        static public var ASID_CAST_SKILL_ACK:String = "9";
        static public var ASID_CAST_SKILL_NTF:String = "10";
        static public var ASID_HP_UPDATE_NTF:String = "11";
        static public var ASID_MP_UPDATE_NTF:String = "12";
        static public var ASID_ADD_MONSTER_NTF:String = "13";
        static public var ASID_CHAT_REQ:String = "14";
        static public var ASID_CHAT_Ntf:String = "15";
        
        private function DecodeASID_CHAT_Ntf(buf:ByteArray, proc:ARPGMsgProcessor):void
        {
            var pkg:ASPKG_CHAT_NTF=new ASPKG_CHAT_NTF;
            pkg.mergeFrom(buf);
            proc.OnRecvChatNtf(pkg);
        }
        
        private function DecodeASID_MOVE_ACK(buf:ByteArray, proc:ARPGMsgProcessor):void
        {
            var pkg:ASPKG_MOVE_ACK=new ASPKG_MOVE_ACK;
            pkg.mergeFrom(buf);
            proc.OnRecvMoveAck(pkg);
        }
        
        private function DecodeASID_HP_UPDATE_NTF(buf:ByteArray, proc:ARPGMsgProcessor):void
        {
            var pkg:ASPKG_HP_UPDATE_NTF=new ASPKG_HP_UPDATE_NTF;
            pkg.mergeFrom(buf);
            proc.OnRecvHPUpdateNtf(pkg);
        }
        
        private function DecodeASID_CAST_SKILL_NTF(buf:ByteArray, proc:ARPGMsgProcessor):void
        {
            var pkg:ASPKG_CAST_SKILL_NTF=new ASPKG_CAST_SKILL_NTF;
            pkg.mergeFrom(buf);
            proc.OnRecvCastSkillNtf(pkg);
        }
        
        private function DecodeASID_MOVE_NTF(buf:ByteArray, proc:ARPGMsgProcessor):void
        {
            var pkg:ASPKG_MOVE_NTF=new ASPKG_MOVE_NTF;
            pkg.mergeFrom(buf);
            proc.OnRecvMoveNtf(pkg);
        }
        
        private function DecodeASID_REMOVE_PLAYER_NTF(buf:ByteArray, proc:ARPGMsgProcessor):void
        {
            var pkg:ASPKG_REMOVE_PLAYER_NTF=new ASPKG_REMOVE_PLAYER_NTF;
            pkg.mergeFrom(buf);
            proc.OnRecvRemovePlayerNtf(pkg);
        }
        
        private function DecodeASID_LOGIN_ACK(buf:ByteArray, proc:ARPGMsgProcessor):void
        {
            var pkg:ASPKG_LOGIN_ACK=new ASPKG_LOGIN_ACK;
            pkg.mergeFrom(buf);
            proc.OnRecvLoginAck(pkg);
        }
        
        private function DecodeASID_MP_UPDATE_NTF(buf:ByteArray, proc:ARPGMsgProcessor):void
        {
            var pkg:ASPKG_MP_UPDATE_NTF=new ASPKG_MP_UPDATE_NTF;
            pkg.mergeFrom(buf);
            proc.OnRecvMPUpdateNtf(pkg);
        }
        
        private function DecodeASID_ADD_PLAYER_NTF(buf:ByteArray, proc:ARPGMsgProcessor):void
        {
            var pkg:ASPKG_ADD_PLAYER_NTF=new ASPKG_ADD_PLAYER_NTF;
            pkg.mergeFrom(buf);
            proc.OnRecvAddPlayerNtf(pkg);
        }
        
        private function DecodeASID_ADD_MONSTER_NTF(buf:ByteArray, proc:ARPGMsgProcessor):void
        {
            var pkg:ASPKG_ADD_MONSTER_NTF=new ASPKG_ADD_MONSTER_NTF;
            pkg.mergeFrom(buf);
            proc.OnRecvAddMonsterNtf(pkg);
        }
        
        private function DecodeASID_CAST_SKILL_ACK(buf:ByteArray, proc:ARPGMsgProcessor):void
        {
            var pkg:ASPKG_CAST_SKILL_ACK=new ASPKG_CAST_SKILL_ACK;
            pkg.mergeFrom(buf);
            proc.OnRecvCastSkillAck(pkg);
        }
        
        private var DecodeFuncArray:Dictionary = new Dictionary();
        
        public function Init():void
        {
            DecodeFuncArray[ASID_CHAT_Ntf] = DecodeASID_CHAT_Ntf;
            DecodeFuncArray[ASID_MOVE_ACK] = DecodeASID_MOVE_ACK;
            DecodeFuncArray[ASID_HP_UPDATE_NTF] = DecodeASID_HP_UPDATE_NTF;
            DecodeFuncArray[ASID_CAST_SKILL_NTF] = DecodeASID_CAST_SKILL_NTF;
            DecodeFuncArray[ASID_MOVE_NTF] = DecodeASID_MOVE_NTF;
            DecodeFuncArray[ASID_REMOVE_PLAYER_NTF] = DecodeASID_REMOVE_PLAYER_NTF;
            DecodeFuncArray[ASID_LOGIN_ACK] = DecodeASID_LOGIN_ACK;
            DecodeFuncArray[ASID_MP_UPDATE_NTF] = DecodeASID_MP_UPDATE_NTF;
            DecodeFuncArray[ASID_ADD_PLAYER_NTF] = DecodeASID_ADD_PLAYER_NTF;
            DecodeFuncArray[ASID_ADD_MONSTER_NTF] = DecodeASID_ADD_MONSTER_NTF;
            DecodeFuncArray[ASID_CAST_SKILL_ACK] = DecodeASID_CAST_SKILL_ACK;
        }
        
        public function Decode(MsgID:uint, buf:ByteArray, proc:ARPGMsgProcessor):void
        {
            var fun:Function = DecodeFuncArray[MsgID.toString()];
            if (fun != null)
                fun(buf, proc);
			else
				logger("陌生协议："+MsgID);
        }
    }
}
